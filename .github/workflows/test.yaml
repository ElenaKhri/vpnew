name: Test

on: workflow_dispatch

jobs:
  test:
    runs-on: ubuntu-22.04
    steps:
      # Выкачиваем репозиторий
      - name: Checkout repository
        uses: actions/checkout@v4

      # Устанавливаем Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Настраиваем Java
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      # Собираем Docker образ для Selenoid
      - name: Build Selenoid Docker image
        run: docker build -t my-selenoid .

      # Запускаем Selenoid
      - name: Start Selenoid
        run: docker run -d -p 4444:4444 --name my-selenoid my-selenoid

      # Проверяем статус Docker
      - name: Check Docker status
        run: docker info

      # Проверяем, что контейнер Selenoid запущен
      - name: Check Selenoid container status
        run: docker ps -a --filter "name=my-selenoid"

      # Проверяем логи Docker
      - name: Check Docker logs
        run: |
          CONTAINER_ID=$(docker ps -q --filter "name=my-selenoid")
          if [ -z "$CONTAINER_ID" ]; then
            echo "Selenoid container is not running"
            exit 1
          fi
          docker logs $CONTAINER_ID

      # Проверяем конфигурацию Selenoid
      - name: Check Selenoid configuration
        run: |
          CONTAINER_ID=$(docker ps -q --filter "name=my-selenoid")
          if [ -z "$CONTAINER_ID" ]; then
            echo "Selenoid container is not running"
            exit 1
          fi
          docker exec $CONTAINER_ID cat /etc/selenoid/browsers.json

      # Проверяем сетевые настройки
      - name: Check network settings
        run: |
          curl http://localhost:4444/wd/hub/status

      # Устанавливаем OpenVPN
      - name: Install OpenVPN
        run: sudo apt-get update && sudo apt-get install -y openvpn

      # Настраиваем OpenVPN
      - name: Configure OpenVPN
        run: |
          echo "${{ secrets.OPENVPN_CONFIG }}" > openvpn.ovpn
          echo "${{ secrets.OPENVPN_USERNAME }}" > openvpn.auth
          echo "${{ secrets.OPENVPN_PASSWORD }}" >> openvpn.auth
          sudo openvpn --config openvpn.ovpn --auth-user-pass openvpn.auth --daemon

      # Проверяем подключение OpenVPN
      - name: Check OpenVPN connection
        run: |
          sleep 10  # ждем, пока OpenVPN установит соединение
          ip a  # проверяем сетевые интерфейсы
          curl -I https://www.google.com  # проверяем доступность интернета

      # Делаем gradlew исполняемым
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Запускаем тесты
      - name: Run tests
        run: ./gradlew clean test -Dselenide.remote=http://localhost:4444/wd/hub --info

      # Скачиваем историю тестов
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      # Генерируем отчет Allure
      - name: Generate Allure report
        uses: simple-elf/allure-report-action@master
        if: always()
        with:
          gh_pages: gh-pages
          allure_results: build/allure-results
          allure_report: allure-report
          allure_history: allure-history

      # Публикуем отчет Allure
      - name: Publish Allure report
        uses: peaceiris/actions-gh-pages@v2
        if: always()
        env:
          PERSONAL_TOKEN: ${{ secrets.LENOCHKIN_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: allure-history

      # Очистка временных файлов
      - name: Clean up
        run: |
          sudo rm -f openvpn.auth
          sudo rm -f openvpn.ovpn
